## **1. The `this` Keyword**

Sometimes a method will need to refer to the object that invoked it. To allow this, Java defines the `this` keyword.

`this` can be used inside any method to refer to the **current object**.
That is, `this` is always a reference to the object on which the method was invoked.

---

## **2. The `final` Keyword**

A field can be declared as `final`. Doing so prevents its contents from being modified, making it essentially a constant.
This means that you must initialize a `final` field when it is declared.

It is a common coding convention to choose **all uppercase identifiers** for `final` fields:

```java
final int FILE_OPEN = 2;
```

**Note:**

* `final` guarantees immutability only when instance variables are **primitive types**, not reference types.
* If an instance variable of a reference type has the `final` modifier:

  * The value of that instance variable (the reference to an object) will never change—it will always refer to the same object.
  * But the **value of the object itself** can change.

---

## **3. The `finalize()` Method**

Sometimes an object will need to perform some action when it is destroyed.

To handle such situations, Java provides a mechanism called **finalization**.
By using finalization, you can define specific actions that will occur when an object is just about to be reclaimed by the garbage collector.

To add a finalizer to a class, define the `finalize()` method.
The Java runtime calls this method whenever it is about to recycle an object of that class.

Right before an asset is freed, the Java runtime calls the `finalize()` method on the object.

Example:

```java
protected void finalize() {
    // finalization code here
}
```

---

## **4. Constructors**

Once defined, the constructor is automatically called when the object is created, before the `new` operator completes.

Constructors look a little strange because they have **no return type**, not even `void`.
This is because the implicit return type of a class’ constructor is the class type itself.

Example:

```java
Box mybox1 = new Box();
```

Here, `new Box()` is calling the `Box()` constructor.

---

## **5. Inheritance and Constructors in Java**

In Java, the constructor of a base class with no argument gets **automatically called** in the derived class constructor.

**Example Output:**

```
Base Class Constructor Called
Derived Class Constructor Called
```

**Code:**

```java
// filename: Main.java
class Base {
    Base() {
        System.out.println("Base Class Constructor Called ");
    }
}

class Derived extends Base {
    Derived() {
        System.out.println("Derived Class Constructor Called ");
    }
}

public class Main {
    public static void main(String[] args) {
        Derived d = new Derived();
    }
}
```

---

## **6. Default Constructor and Inheritance Rules**

* Any class will have a **default constructor**, whether we declare it or not.
* If we inherit a class, then the derived class **must call its superclass constructor**.
* This is done **by default** in the derived class.
* If the derived class does not have a default constructor, the JVM will invoke its default constructor and call the superclass constructor by default.

**Special Case:**
If we have a parameterized constructor in the derived class, it **still calls the default superclass constructor** by default.
If the superclass **does not** have a default constructor but has a parameterized constructor, then the derived class constructor **must explicitly call** the parameterized superclass constructor.

---

Do you also want me to merge **this section** and the **previous Class/Object section** into a **single master organized note** so it’s all in one place? That would make it a complete Java OOP basics reference.
